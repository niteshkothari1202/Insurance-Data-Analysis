f(x) = function{
1/(1+exp(-x))
}
# 1
# (i)
f(x) = function(x){
1/(1+exp(-x))
}
# 1
# (i)
f = function(x){
1/(1+exp(-x))
}
# (ii)
x = seq(-10,10)
plot(x,f(x),type = "l",xlab = "x",ylab = "logistic function")
WeibullSim = rweibull(1000,1.5,100000)
set.seed(1234)
options(scipen=5)
WeibullSim = rweibull(1000,1.5,100000)
# 1
# (i)
f = function(x){
1/(1+exp(-x))
}
# (ii)
x = seq(-10,10)
plot(x,f(x),type = "l",xlab = "x",ylab = "logistic function")
# 2
# (i)
set.seed(1234)
options(scipen=5)
WeibullSim = rweibull(1000,1.5,100000)
# 1
# (i)
f = function(x){
1/(1+exp(-x))
}
# (ii)
x = seq(-10,10)
plot(x,f(x),type = "l",xlab = "x",ylab = "logistic function")
# 2
# (i)
set.seed(1234)
options(scipen=5)
WeibullSim = rweibull(1000,1.5,100000)
# (ii)
mean(WeibullSim)
sd(WeibullSim)
# 1
# (i)
f = function(x){
1/(1+exp(-x))
}
# (ii)
x = seq(-10,10)
plot(x,f(x),type = "l",xlab = "x",ylab = "logistic function")
# 2
# (i)
set.seed(1234)
options(scipen=5)
WeibullSim = rweibull(1000,1.5,100000)
# (ii)
m = mean(WeibullSim);m
s = sd(WeibullSim);s
# (iii)
lnsigma = sqrt(ln(1+s^2/m^2));lnsigma
# (iii)
lnsigma = sqrt(log(1+s^2/m^2));lnsigma
# (iii)
lnsigma = sqrt(log(1+s^2/m^2));lnsigma
lnmu = ln(m)-1/2*lnsigma^2;lnmu
# (iii)
lnsigma = sqrt(log(1+s^2/m^2));lnsigma
lnmu = ln(m)-1/2*lnsigma^2;lnmu
# (iii)
lnsigma = sqrt(log(1+s^2/m^2));lnsigma
lnmu = log(m)-1/2*lnsigma^2;lnmu
# 2
# (i)
set.seed(1234)
options(scipen=5)
WeibullSim = rweibull(1000,1.5,100000)
# (ii)
m = mean(WeibullSim);m
s = sd(WeibullSim);s
# (iii)
lnsigma = sqrt(log(1+s^2/m^2));lnsigma
lnmu = log(m)-1/2*lnsigma^2;lnmu
# (iv)
LognormalSim = rlnorm(1000,lnmu,lnsigma)
head(LognormalSim)
# 2
# (i)
set.seed(1234)
options(scipen=5)
WeibullSim = rweibull(1000,1.5,100000)
head(WeibullSim)
# (ii)
m = mean(WeibullSim);m
s = sd(WeibullSim);s
# (iii)
lnsigma = sqrt(log(1+s^2/m^2));lnsigma
lnmu = log(m)-1/2*lnsigma^2;lnmu
# (iv)
LognormalSim = rlnorm(1000,lnmu,lnsigma)
head(LognormalSim)
par(mfrow = c(1,2))
hist(WeibullSim,main = "Simulated Weibull distribution")
hist(LognormalSim,main = "simulated lognormal distribution")
par(mfrow = c(1,2))
hist(WeibullSim,main = "Simulated Weibull dist.")
hist(LognormalSim,main = "simulated lognormal dist.")
plot(density(WeibullSim),type = "l",col = "red",ylim = c(0,0.00001),breaks)
lines(density(LognormalSim),col = "green")
legend("topright",legend = c("Weibull","lognormal"),col = c("red","green"))
par(mfrow = c(1,1))
plot(density(WeibullSim),type = "l",col = "red",ylim = c(0,0.00001),breaks)
lines(density(LognormalSim),col = "green")
legend("topright",legend = c("Weibull","lognormal"),col = c("red","green"))
par(mfrow = c(1,2))
hist(WeibullSim,main = "Simulated Weibull dist.")
hist(LognormalSim,main = "simulated lognormal dist.")
par(mfrow = c(1,1))
# 2
# (i)
set.seed(1234)
options(scipen=5)
WeibullSim = rweibull(1000,1.5,100000)
head(WeibullSim)
# (ii)
m = mean(WeibullSim);m
s = sd(WeibullSim);s
# (iii)
lnsigma = sqrt(log(1+s^2/m^2));lnsigma
lnmu = log(m)-1/2*lnsigma^2;lnmu
# (iv)
LognormalSim = rlnorm(1000,lnmu,lnsigma)
head(LognormalSim)
par(mfrow = c(1,2))
hist(WeibullSim,main = "Simulated Weibull dist.")
hist(LognormalSim,main = "simulated lognormal dist.")
par(mfrow = c(1,1))
# (v)
plot(density(WeibullSim),type = "l",col = "red",ylim = c(0,0.00001),breaks)
lines(density(LognormalSim),col = "green")
legend("topright",legend = c("Weibull","lognormal"),col = c("red","green"))
# (v)
plot(density(WeibullSim),type = "l",col = "red",ylim = c(0,0.00001))
lines(density(LognormalSim),col = "green")
legend("topright",legend = c("Weibull","lognormal"),col = c("red","green"))
legend("topright",legend = c("Weibull","lognormal"),col = c("red","green"),pch = 1)
legend("topright",legend = c("Weibull","lognormal"),col = c("red","green"),lty = 1)
# (v)
plot(density(WeibullSim),type = "l",col = "red",ylim = c(0,0.00001))
lines(density(LognormalSim),col = "green")
legend("topright",legend = c("Weibull","lognormal"),col = c("red","green"),lty = 1)
# 3
# (i)
states = c("Pass","Shoot","Dribble")
# (ii)
transmatrix = matrix(c(0.5,0.1,0.4,
0.7,0.2,0.1,
0.4,0.3,0.3),3,3,byrow = T)
markv = new("markovchain",transitionMatrix = transmatrix,states = states)
library(markovchain)
markv = new("markovchain",transitionMatrix = transmatrix,states = states)
library(markovchain)
library(markovchain)
markv = new("markovchain",transitionMatrix = transmatrix,states = states)
markv
plot(markv)
# (iv)
steadyStates(markv)
# (v)
c(1,0,0)*markv^2
library(markovchain)
markv = new("markovchain",transitionMatrix = transmatrix,states = states)
# (iii)
plot(markv)
# (iv)
steadyStates(markv)
# (v)
# (i)
c(1,0,0)*markv^2
# pass with 0.48 probability
# (ii)
c(1,0,0)*markv^5
markovchainSequence(100,markv,markv)
markovchainSequence(100,markv)
set.seed(100)
seqq = markovchainSequence(100,markv)
table(seqq)
set.seed(100)
seqq = markovchainSequence(100,markv)
table(seqq)
barplot(seqq)
barplot(table(seqq))
# (iv)
steadyStates(markv)
# (vii)
barplot(table(seqq),main = "No. of action of football player")
table(seqq)
# (viii)
# The simulated actions suggest pass rate close to 0.5, close to steady states
# but the shoot and dribble are slightly different than expected, the sample size
# is small to form any conclusion further data is needed for comparison.
# 3
# (i)
states = c("Pass","Shoot","Dribble")
# (ii)
transmatrix = matrix(c(0.5,0.1,0.4,
0.7,0.2,0.1,
0.4,0.3,0.3),3,3,byrow = T)
library(markovchain)
markv = new("markovchain",transitionMatrix = transmatrix,states = states)
# (iii)
plot(markv)
# (iv)
steadyStates(markv)
# (v)
# (i)
c(1,0,0)*markv^2
# pass with 0.48 probability
# (ii)
c(1,0,0)*markv^5
# pass with 0.50475 probability
# (vi)
set.seed(100)
seqq = markovchainSequence(100,markv)
table(seqq)
# (vii)
barplot(table(seqq),main = "No. of action of football player")
# (viii)
# The simulated actions suggest pass rate close to 0.5, close to steady states
# but the shoot and dribble are slightly different than expected, the sample size
# is small to form any conclusion further data is needed for comparison.
# 4
tsunpsots = ts(sunspots,frequency = 12)
# 4
tsunpsots = ts(sunspots,frequency = 12,start = c(1749,1))
# 4
tsunpsots = ts(sunspots,frequency = 12,start = c(1749,1))
ts.plot(tsunpsots,main = "Time series of sunspots at SFO, Zurich",ylab = "time")
ts.plot(tsunpsots,main = "Time series of sunspots at SFO, Zurich",ylab = "time",xlab = "sunspot number")
ts.plot(tsunpsots,main = "Time series of sunspots at SFO, Zurich",xlab = "time",ylab = "sunspot number")
# 4
tsunpsots = ts(sunspots,frequency = 12,start = c(1749,1))
ts.plot(tsunpsots,main = "Time series of sunspots at SFO, Zurich",xlab = "time",ylab = "sunspot number")
# (ii)
acf(tsunpsots,main = "ACF of sunspots at SFO, Zurich")
# (ii)
par(mfrow = c(2,1))
acf(tsunpsots,main = "ACF of sunspots at SFO, Zurich")
pacf(tsunpsots,main = "PACF of sunspots at SFO, Zurich")
acf(sunspots,plot = F)
acf(sunspots,plot = F,lag.max = length(tsunpsots/12))
# (iii)
acfsun = acf(sunspots,plot = F,lag.max = length(tsunpsots/12))
head(acfsun)
pacfsun = pacf(sunspots,plot = F,lag.max = length(tsunpsots/12))
head(pacfsun)
# (iii)
acfsun = acf(sunspots,plot = F)
pacfsun = pacf(sunspots,plot = F)
# (iii)
acf(sunspots,plot = F)
pacf(sunspots,plot = F)
# (v)
s = diff(tsunpsots,lag = 12,differences = 1)
head(s)
# (iii)
acf(tsunspots,plot = F)
# 4
# (i)
tsunpsots = ts(sunspots,frequency = 12,start = c(1749,1))
# (iii)
acf(tsunspots,plot = F)
# (iii)
acf(tsunpots,plot = F)
pacf(sunpots,plot = F)
# (iii)
acf(tsunpsots,plot = F)
pacf(tsunpsots,plot = F)
# (v)
s = diff(tsunpsots,lag = 12,differences = 1)
head(s)
head(s,12)
# (vi)
decompose(tsunpsots,type = "additive")
# (vi)
plot(decompose(tsunpsots,type = "additive"))
# 4
# (i)
tsunpsots = ts(sunspots,frequency = 12,start = c(1749,1))
ts.plot(tsunpsots,main = "Time series of sunspots at SFO, Zurich",xlab = "time",ylab = "sunspot number")
# (ii)
par(mfrow = c(2,1))
acf(tsunpsots,main = "ACF of sunspots at SFO, Zurich")
pacf(tsunpsots,main = "PACF of sunspots at SFO, Zurich")
# (iii)
acf(tsunpsots,plot = F)
pacf(tsunpsots,plot = F)
# (iv)
# ACF is gradually decreasing suggesting the observations have dependency
# over previous observations.There is a correlation beyond 2.5 years and it is
# keep on going
# (v)
s = diff(tsunpsots,lag = 12,differences = 1)
head(s,12)
# (vi)
plot(decompose(tsunpsots,type = "additive"))
# (vii)
# There is more cycilcal movement in the data set there is seasonality present
# at longer lags and may require further differencing.
# (viii)
# The simulated actions suggest pass rate close to 0.5, close to steady states
# but the shoot and dribble are slightly different than expected, the sample size
# is small to form any conclusion further data is needed for comparison.
par(mfrow = c(1,1))
ts.plot(tsunpsots,main = "Time series of sunspots at SFO, Zurich",xlab = "time",ylab = "sunspot number")
# (ii)
par(mfrow = c(1,2))
acf(tsunpsots,main = "ACF of sunspots at SFO, Zurich")
pacf(tsunpsots,main = "PACF of sunspots at SFO, Zurich")
data = data.frame(read.csv(file.choose(),header = T))
str(data)
data = data.frame(read.csv(file.choose(),header = T,stringsAsFactors = T))
str(data)
332*0.7
trainingdata = data[0:233,]
testingdata = data[233:332,]
# 5
# (i)
data = data.frame(read.csv(file.choose(),header = T,stringsAsFactors = T))
str(data)
trainingdata = data[0:233,]
testingdata = data[233:332,]
library(tree)
tree(type~bmi+age,data = data)
summary(model)
library(tree)
model = tree(type~bmi+age,data = data)
model
par(mfrow = c(1,1))
summary(model)
plot(model)
text(model)
# (ii)
library(tree)
model = tree(type~bmi+age,data = data)
model
par(mfrow = c(1,1))
# (iii)
summary(model)
plot(model)
text(model)
# (iv)
pred(model,testingdata,type = "class")
# (iv)
predict(model,testingdata,type = "class")
# (iv)
pred = predict(model,testingdata,type = "class")
summary(pred)
install.packages("copula")
library(copula)
set.seed(3)
GaussUV = rCopula(200000, normalCopula(param = -0.5))
GaussXY = matrix(nrow = 200000, ncol = 2)
GaussXY[,1] = qnorm(GaussUV[,1], mean = 20, sd = 3)
GaussXY[,2] = qnorm(GaussUV[,2], mean = 200, sd = 50)
t3UV = rCopula(n, tCopula(param = -0.5, df = 3))
set.seed(3)
t3UV = rCopula(n, tCopula(param = -0.5, df = 3))
t3XY = matrix(nrow = 200000,ncol = 2)
t3XY = qnorm(t3UV[,1],mean = 20,sd = 3)
t3XY = qnorm(t3UV[,2],mean = 200,sd = 50)
t3UV = rCopula(n, tCopula(param = -0.5, df = 3))
t3UV = rCopula(200000, tCopula(param = -0.5, df = 3))
t3XY = matrix(nrow = 200000,ncol = 2)
t3XY = qnorm(t3UV[,1],mean = 20,sd = 3)
t3XY = qnorm(t3UV[,2],mean = 200,sd = 50)
head(t3XY)
set.seed(3)
t3UV = rCopula(200000, tCopula(param = -0.5, df = 3))
t3XY = matrix(nrow = 200000,ncol = 2)
t3XY = qnorm(t3UV[,1],mean = 20,sd = 3)
t3XY = qnorm(t3UV[,2],mean = 200,sd = 50)
head(t3XY)
a[i] = mean(GaussXY[GaussXY[,1]>=i][,2])
for (i in 10:30) {
a[i] = mean(GaussXY[GaussXY[,1]>=i][,2])
}
a[i] = mean(GaussXY[GaussXY[,1]>=i])
a = numeric(21)
a[i] = mean(GaussXY[GaussXY[,1]>=i])
for (i in 10:30) {
a[i] = mean(GaussXY[GaussXY[,1]>=i])
}
a = numeric(21)
for (i in 10:30) {
a[i] = mean(GaussXY[GaussXY[,1]>=i])
}
b = GaussXY[GaussXY[,1]>10]
b = GaussXY[GaussXY[,1]>10]
head(b)
a = numeric(21)
for (i in 10:30) {
b = GaussXY[GaussXY[,1]>i]
a[i] = b[,2]
}
a = mean(GaussXY[,2][GaussXY[,1]>i])
y1 = numeric(21)
y2 = numeric(21)
for (i in 10:30) {
y1 = mean(GaussXY[,2][GaussXY[,1]>i])
y2 = mean(t3XY[,2][t3XY[,1]>i])
}
y2 = mean(t3XY[,2][t3XY[,1]>i])
y1 = mean(GaussXY[,2][GaussXY[,1]>i])
t3XY = qnorm(t3UV[,2],mean = 200,sd = 50)
t3XY[,1] = qnorm(t3UV[,1],mean = 20,sd = 3)
t3XY[,2] = qnorm(t3UV[,2],mean = 200,sd = 50)
t3XY = matrix(nrow = 200000,ncol = 2)
t3XY[,1] = qnorm(t3UV[,1],mean = 20,sd = 3)
t3XY[,2] = qnorm(t3UV[,2],mean = 200,sd = 50)
y1 = numeric(21)
y2 = numeric(21)
for (i in 10:30) {
y1 = mean(GaussXY[,2][GaussXY[,1]>i])
y2 = mean(t3XY[,2][t3XY[,1]>i])
}
y1 = numeric(21)
y2 = numeric(21)
for (i in 10:30) {
y1[i-9] = mean(GaussXY[,2][GaussXY[,1]>i])
y2[i-9] = mean(t3XY[,2][t3XY[,1]>i])
}
plot(y1,type = "l")
plot(y1,type = "l","Gaussian copula")
plot(y1,type = "l","Gaussian copula")
plot(y1,type = "l",main = "Gaussian copula vs T copula")
lines(y2,col = "red")
plot(y1,type = "l",main = "Gaussian copula vs T copula",ylim = c(50,250))
lines(y2,col = "red")
legend("topright",legend = c("Gaussian","T distribution"),col = c("black","red"),lty = 1)
# 1
# (i)
set.seed(914)
s = numeric(20000)
m = rpois(20000,1000)
for (i in 1:20000) {
a = rgamma(m[i],750,0.25)
s[i] = sum(a)
}
head(s)
# 1
# (i)
set.seed(914)
s = numeric(20000)
m = rpois(20000,1000)
for (i in 1:20000) {
a = rgamma(m[i],750,0.25)
s[i] = sum(a)
}
head(s)
hist(s)
# 1
# (i)
set.seed(914)
s = numeric(20000)
m = rpois(20000,1000)
for (i in 1:20000) {
a = rlnorm(m[i],750,0.25)
s[i] = sum(a)
}
head(s)
hist(s)
hist(s)
hist(s)
# (iii)
plot(density(s),type = "l",xlim = c(2600000,3300000),ylim = c(0,0.0000045)
,xlab = "aggregate claims",ylab = "density",main = "Emperical density function
of simulated aggregate claim values")
# 1
# (i)
set.seed(914)
s = numeric(20000)
m = rpois(20000,1000)
for (i in 1:20000) {
a = rgamma(m[i],750,0.25)
s[i] = sum(a)
}
head(s)
hist(s)
# (ii)
mean(s)
sd(s)
# (iii)
plot(density(s),type = "l",xlim = c(2600000,3300000),ylim = c(0,0.0000045)
,xlab = "aggregate claims",ylab = "density",main = "Emperical density function
of simulated aggregate claim values")
# (vi)
lines(density(rsim),col = "red")
legend("topleft",legend = c("Emperical sim.","normal dist."),col = c("black","red"),lty = 1)
# 2
# (i)
set.seed(12456)
x = arima.sim(n = 100, model = list(ar = c(0.7,0.2)))
acf(x,main = "ACF of simulated AR(2) process")
pacf(x,main = "PACF of simulated AR(2) process")
plot(x)
